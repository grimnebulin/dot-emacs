;; -*- mode: emacs-lisp; -*-

(defface height2 '((t (:height 4.0))) "4x height")

(add-to-list 'load-path "/usr/share/emacs/site-lisp/w3m")
(add-to-list 'load-path "~/emacs/packages/cc-mode")
(add-to-list 'load-path "~/jdee-2.4.0/lisp")
(add-to-list 'load-path "~/emacs")
(add-to-list 'load-path "~/emacs/emms-3.0")
;; (add-to-list 'load-path "~/emacs/yasnippet")

(require 'emms-setup)
(require 'emms-player-mpg321-remote)
(emms-standard)
(emms-default-players)
(push 'emms-player-mpg321-remote emms-player-list)
(require 'emms-playing-time)
(emms-playing-time 1)

(require 'cl)

(load "functions")
(load "japanese")

; (require 'jde)

(setq jde-web-browser "mozilla")
(setq jde-doc-dir "")
(setq jde-db-set-source-paths "")

; (desktop-save-mode 1)
(transient-mark-mode 1)
(iswitchb-mode 1)
(tool-bar-mode -1)
(random t)
(server-start)

(setenv "BASH_ENV" (concat (getenv "HOME") "/.bash_profile"))
(setenv "NNTPSERVER" "news.supernews.com")
(setenv "SHELL" "bash")
; (setenv "JAVA_HOME" "/System/Library/Frameworks/JavaVM.framework/Home")
(setenv "JAVA_HOME" "/System/Library/Frameworks/JavaVM.Framework/Versions/1.6.0/Home")

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
;; (set-terminal-coding-system 'utf-8)
;; (set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

;;  Variables:

(set-associations initial-frame-alist (top . 0) (left . -100))
(set-associations default-frame-alist (height . 50))

(setq user-full-name "Sean McAfee")
(setq user-mail-address "eefacm@gmail.com")

(setq mac-option-modifier 'super)
(setq iswitchb-prompt-newbuffer nil)
(setq-default indent-tabs-mode nil)
(setq backup-directory-alist '(("" . "~/.emacs_backups")))
(setq eval-expression-print-length nil)
(setq python-indent 4)
(setq-default javascript-indent-level 4)
(setq css-indent-offset 4)
(setq c-basic-offset 4)
(setq perl-indent-level 4)
(setq dired-dwim-target t)
(setq htmlize-generate-hyperlinks nil)
;; (setq term-term-name "vt100")
(setq bookmark-save-flag 1)
(setq vc-follow-symlinks t)


;; Key bindings:

(global-set-key* [(shift control n)] (next-line) (scroll-up 1))
(global-set-key* [(shift control p)] (previous-line) (scroll-down 1))
(global-set-key [(control x) (control b)] 'ibuffer)
(global-set-key [(control ?*)] 'my-isearch-word-at-point)
(global-set-key [(control m)] 'newline-and-indent)
(global-set-key [(control x) (control o)] 'other-window-delete-rest)
(global-set-key [(super s)] 'shell)
(global-set-key [(meta  p)] 'shell)
(global-set-key [(super \\)] 'find-file-at-point)
;; (global-set-key [(super d)] 'sql-mysql) ;; conflicts with prefix in dd.el
;; (global-set-key "\C-xm" 'browse-url-at-point)
(global-set-key* [(super u)] (set-buffer-file-coding-system 'utf-8))
(global-set-key [(super ?!)] 'shell-command-with-?-expansion)
(global-set-key "\C-x\M-k" 'kill-this-buffer-and-maybe-associated-file)
(global-set-key "\C-x\C-u" 'upcase-region-or-characters)
(global-set-key "\C-x\C-l" 'downcase-region-or-characters)

(global-unset-key "\C-x\C-n")  ;; set-goal-column
(when window-system
  (global-unset-key "\C-z")
  (global-unset-key "\C-x\C-z"))


;; Hooks:

(add-hook 'text-mode-hook 'auto-fill-mode)
(add-hook* 'text-mode-hook (local-set-key [(control m)] 'newline))
(add-hook 'html-mode-hook 'turn-off-auto-fill)
(add-hook 'sgml-mode-hook 'turn-off-auto-fill)
(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)
(add-hook 'message-mode-hook 'auto-fill-mode)

(remove-hook 'comint-output-filter-functions
             'comint-postoutput-scroll-to-bottom)

(add-hook* 'comint-exec-hook
  (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil))

;; WRIF:

(defconst wrif-directory "~/WRIF")

(defun wrif-open-directory ()
  (interactive)
  (dired wrif-directory)
  (revert-buffer))

(defun wrif-play-directory ()
  (interactive)
  (let ((file-list (dired-get-marked-files)))
    (assert (= 1 (length file-list)))
    (emms-play-directory (car file-list)))
  (kill-buffer nil)
  (emms-playlist-mode-go)
  (goto-line 2))

(global-set-key [(super w) ?d] 'wrif-open-directory)
(global-set-key [(super w) ?p] 'wrif-play-directory)
(global-set-key [(super w) ?l] 'emms-playlist-mode-go)

(global-set-key [(super meta x)] 'emms-pause)
(global-set-key [(super meta p)] 'emms-pause)

(defconst wrif-skip-intervals '((7 . super) (60 . meta) (360 . control)))

(loop with modifiers = nil
      for (magnitude . modifier) in wrif-skip-intervals do
        (setq modifiers (append modifiers (list modifier)))
        (loop for (key . func) in '((right . +) (left . -)) do
          (global-set-key (vector (append modifiers (list key)))
                          `(lambda () (interactive)
                             (emms-seek ,(funcall func magnitude))))))

;; Gnus config:

(setq gnus-summary-line-format "%U%R%z %(%&user-date;  %-15,15f %* %B%s%)\n"
      gnus-user-date-format-alist '((t . "%d.%m.%Y %H:%M"))
      gnus-sum-thread-tree-false-root ""
      gnus-sum-thread-tree-indent " "
      gnus-sum-thread-tree-root ""
      gnus-sum-thread-tree-leaf-with-other "├► "
      gnus-sum-thread-tree-single-leaf "╰► "
      gnus-sum-thread-tree-vertical "│"
      gnus-treat-hide-citation t
      gnus-cited-lines-visible '(0 . 5)
      gnus-large-newsgroup 10000)


;; W3M:

(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
; (setq browse-url-browser-function 'w3m-browse-url)


;; Ibuffer:

(autoload 'ibuffer "ibuffer" "List buffers." t)


;; Snippets:

;; (require 'yasnippet)
;; (yas/load-directory "~/emacs/snippets")


;; Misc:

(defalias 'perldoc 'cperl-perldoc
  "Convenient shorthand for cperl-perldoc.")

(defalias 'gof 'gnus-other-frame)
(defalias 'tb 'comint-truncate-buffer)

(require 'color-theme)
(require 'zenburn)
(color-theme-initialize)
(zenburn)

(defadvice gnus (before gnus-single-window compile activate)
  (delete-other-windows))

(defadvice open-line (around vi-style-open-line activate)
  "Make open-line behave more like vi."
  (beginning-of-line)
  ad-do-it
  (indent-according-to-mode))

(defvar recenter-fraction 0.33
  "*The recenter-proportionally advice will recenter the screen by
putting the current line this far down the window.")

(defadvice recenter (before recenter-proportionally activate)
  (or (ad-get-arg 0)
      (ad-set-arg 0 (truncate (* recenter-fraction (window-body-height))))))

(quietly-read-abbrev-file "~/.abbrev_defs")

;;;;;;;

(defun insert-vowel-with-macron ()
  (interactive)
  (insert
   (case last-input-char
     (?a "ā")
     (?A "Ā")
     (?e "ē")
     (?E "Ē")
     (?i "ī")
     (?I "Ī")
     (?o "ō")
     (?O "Ō")
     (?u "ū")
     (?U "Ū")
     (otherwise (char-to-string last-input-char)))))

(loop for char in '(?a ?A ?e ?E ?i ?I ?o ?O ?u ?U) do
      (global-set-key (vector '(control x) ?9 char) 'insert-vowel-with-macron))


;;
;; Erlang
;;

(add-to-list 'load-path "/opt/local/lib/erlang/lib/tools-2.6.6/emacs")
(setq erlang-root-dir "/opt/local/lib/erlang")
(add-to-list 'exec-path "/opt/local/lib/erlang/bin")
(require 'erlang-start)

;; Automatically-added stuff:

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(bsh-jar "/Users/mcafee/bsh-2.0b4.jar")
 '(canlock-password "bea0fca6806aca975e53c90cfbe4bb02328e8b4c")
 '(isearch-allow-scroll t)
 '(jde-enable-abbrev-mode t)
 '(jde-jdk-registry (quote (("1.6.0" . "/System/Library/Frameworks/JavaVM.Framework/Versions/1.6.0"))))
 '(w3m-search-engine-alist (quote (("WWWJDIC" "http://www.csse.monash.edu.au/~jwb/cgi-bin/wwwjdic.cgi?1E" undecided "dsrchkey=%s&dsrchtype=J") ("yahoo" "http://search.yahoo.com/bin/search?p=%s" nil) ("yahoo-ja" "http://search.yahoo.co.jp/bin/search?p=%s" euc-japan) ("google" "http://www.google.com/search?q=%s" nil) ("google-ja" "http://www.google.com/search?q=%s&hl=ja&lr=lang_ja&ie=Shift_JIS" shift_jis) ("google groups" "http://groups.google.com/groups?q=%s" nil) ("All the Web" "http://www.alltheweb.com/search?web&_sb_lang=en&q=%s" nil) ("All the Web-ja" "http://www.alltheweb.com/search?web&_sb_lang=ja&cs=euc-jp&q=%s" euc-japan) ("goo-ja" "http://www.goo.ne.jp/default.asp?MT=%s" euc-japan) ("excite-ja" "http://www.excite.co.jp/search.gw?target=combined&look=excite_jp&lang=jp&tsug=-1&csug=-1&search=%s" shift_jis) ("lycos-ja" "http://www.lycos.co.jp/cgi-bin/pursuit?query=\"%s\"&cat=jp&encoding=shift-jis" shift_jis) ("altavista" "http://altavista.com/sites/search/web?q=\"%s\"&kl=ja&search=Search" nil) ("rpmfind" "http://rpmfind.net/linux/rpm2html/search.php?query=%s" nil) ("debian-pkg" "http://packages.debian.org/cgi-bin/search_contents.pl?directories=yes&arch=i386&version=unstable&case=insensitive&word=%s" nil) ("debian-bts" "http://bugs.debian.org/cgi-bin/pkgreport.cgi?archive=yes&pkg=%s" nil) ("freebsd-users-jp" "http://home.jp.FreeBSD.org/cgi-bin/namazu.cgi?key=\"%s\"&whence=0&max=50&format=long&sort=score&dbname=FreeBSD-users-jp" euc-japan) ("iij-archie" "http://www.iij.ad.jp/cgi-bin/archieplexform?query=%s&type=Case+Insensitive+Substring+Match&order=host&server=archie1.iij.ad.jp&hits=95&nice=Nice" nil) ("waei" "http://dictionary.goo.ne.jp/cgi-bin/dict_search.cgi?MT=%s&sw=1" euc-japan) ("eiwa" "http://dictionary.goo.ne.jp/cgi-bin/dict_search.cgi?MT=%s&sw=0" nil) ("kokugo" "http://dictionary.goo.ne.jp/cgi-bin/dict_search.cgi?MT=%s&sw=2" euc-japan) ("eiei" "http://www.dictionary.com/cgi-bin/dict.pl?term=%s&r=67" nil) ("amazon" "http://www.amazon.com/exec/obidos/search-handle-form/250-7496892-7797857" nil "url=index=blended&field-keywords=%s") ("amazon-ja" "http://www.amazon.co.jp/exec/obidos/search-handle-form/250-7496892-7797857" shift_jis "url=index=blended&search-type=quick-search&field-keywords=%s")))))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )


;;; This was installed by package-install.el.
;;; This provides support for the package system and
;;; interfacing with ELPA, the package archive.
;;; Move this code earlier if you want to reference
;;; packages in your .emacs.
(when
    (load
     (expand-file-name "~/.emacs.d/elpa/package.el"))
  (package-initialize))
