;; -*- mode: emacs-lisp; -*-

(require 'cl)

(when window-system
  (set-face-attribute 'default nil :font "DroidSansMono" :height 110)
  (global-unset-key "\C-z")
  (global-unset-key "\C-x\C-z"))

;; "Inconsolata"
;; "Droid Sans Mono"
;; "Monofur"
;; "DejaVu Sans Mono" also looks nice

(add-to-list 'exec-path "/usr/local/bin")
(add-to-list 'exec-path (format "%s/bin" (getenv "HOME")))
(add-to-list 'load-path "~/emacs")

(load "functions")

(font-lock-add-keywords 'emacs-lisp-mode
                        '(("aif" . font-lock-keyword-face)
                          ("awhen" . font-lock-keyword-face)))

(setq initial-frame-alist
      (update-alist initial-frame-alist '(top . 0) '(right . 0)))

(setq default-frame-alist
      (update-alist default-frame-alist '(width . 80)
                    '(height . 50)
                    ))

(transient-mark-mode 1)
(tool-bar-mode -1)
(random t)
(server-start)
(desktop-save-mode 1)
(savehist-mode 1)
(quietly-read-abbrev-file)

(autoload 'ibuffer "ibuffer" "List buffers." t)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; (setq w3m-use-cookies t)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)

(when (require 'package nil t)
  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (package-initialize))

;;
;; Various extra packages:
;;

(require 'paredit)
(require 'autopair)

;; (require 'git-gutter+)
;; (global-git-gutter+-mode 1)

;; (cond
;;  ((require 'color-theme-solarized nil t)
;;   (color-theme-solarized-dark))
;;  ((require 'zenburn nil t)
;;   (zenburn)))

;; git clone https://github.com/kiwanami/emacs-calfw.git
(add-to-list 'load-path "~/emacs/emacs-calfw")
(require 'calfw)
(require 'calfw-org)
(defalias 'oc 'cfw:open-org-calendar)

;; (add-to-list 'load-path "~/emacs/cyberpunk-theme.el")

(when (require 'twittering-mode nil t)
  (setq twittering-use-master-password t)
  (add-hook 'twittering-mode-hook (lambda () (twittering-icon-mode 1))))

;; http://www.assembla.com/code/vitaliel-emacs-config/git/nodes/ack.el
(when (require 'ack nil t)
  ;(setq ack-command "ack -a ")
  )

(add-to-list 'load-path "~/emacs/elnode")

(require 'undo-tree)
(global-undo-tree-mode 1)
(setq undo-tree-mode-lighter "")

;; (add-to-list 'load-path "~/emacs/multiple-cursors")
(require 'multiple-cursors)

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(require 'change-inner)

(require 'anchored-transpose)
(global-set-key "\C-xt" 'anchored-transpose)

(require 'dired-details+)

;;
;; hippie-expand configuration
;;

(global-set-key "\M-/" 'hippie-expand)

(setq hippie-expand-try-functions-list '(
      try-expand-dabbrev
      try-expand-dabbrev-all-buffers
      try-expand-dabbrev-from-kill
      try-complete-file-name-partially
      try-complete-file-name
      try-expand-all-abbrevs
      try-expand-list
      try-expand-line
      try-complete-lisp-symbol-partially
      try-complete-lisp-symbol
))

;;
;; ido configuration
;;

(setq ido-enable-flex-matching t
      ido-use-virtual-buffers t
      ido-create-new-buffer 'always
      ido-max-directory-size 60000
      ido-auto-merge-work-directories-length -1
      ido-decorations '(
          "\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]"
          " [Not readable]" " [Too big]" " [Confirm]"
      )
)

(ido-mode 1)
(ido-everywhere 1)

(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))

(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

(defadvice ido-read-buffer (around ido-read-buffer-possibly-ignore activate)
  "Check to see if user wanted to avoid using ido"
  (if (loop for command = this-command then (symbol-function command)
            while (symbolp command)
            thereis (eq 'ignore (get command 'ido)))
      (let ((read-buffer-function nil))
        (run-hook-with-args 'ido-before-fallback-functions 'read-buffer)
        (setq ad-return-value (apply 'read-buffer (ad-get-args 0))))
    ad-do-it))

(put 'shell                   'ido 'ignore)
(put 'dired-create-directory  'ido 'ignore)
(put 'icalendar-import-buffer 'ido 'ignore)
(put 'gnus-article-save-part  'ido 'ignore)  ;; does this actually work?

;;
;;  Variables:
;;

(setq user-full-name    "Sean McAfee"
      user-mail-address "eefacm@gmail.com")

(setq-default indent-tabs-mode nil)
(setq backup-directory-alist '(("" . "~/.emacs_backups")))
(setq eval-expression-print-length nil)
(setq eval-expression-print-level nil)
(setq python-indent 4)
(setq-default javascript-indent-level 4)
(setq css-indent-offset 4)
(setq-default c-basic-offset 4)
(setq perl-indent-level 4)
(setq dired-deletion-confirmer 'y-or-n-p)
(setq dired-dwim-target t)
(setq bookmark-save-flag 1)
(setq line-move-visual nil)
(setq vc-follow-symlinks t)
(setq term-term-name "vt100")
(setq line-number-display-limit-width 9999)
(setq longlines-show-hard-newlines t)
(setq confirm-nonexistent-file-or-buffer nil)
(setq org-startup-folded nil)
(setq twittering-use-master-password t)
(setq tramp-auto-save-directory "/tmp")
(setq dired-auto-revert-buffer t)
(setq cperl-invalid-face 'off)
(setq use-dialog-box nil)
(setq history-length 1000)
(setq initial-scratch-message nil)

(setq auto-revert-interval 1)

(eval-after-load 'term
  '(term-set-escape-char ?\C-x))

(eval-after-load 'autorevert
  '(auto-revert-set-timer))

(eval-after-load 'jabber
  '(progn
     (global-set-key [(super j)] jabber-global-keymap)
     (global-set-key "\C-x\C-j" 'dired-jump)))

(global-set-key [(super j) (control c)] 'jabber-connect-all)

(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode 1)

(setq browse-url-generic-program "conkeror")

(setq browse-url-browser-function
      (lambda (&rest args)
        (apply (if (eq (not (eq major-mode 'lisp-mode))
                       (not current-prefix-arg))
                   #'browse-url-generic
                 #'w3m-browse-url)
               args)))

(load (setq custom-file "~/.emacs-custom.el"))

(setenv "BASH_ENV" (concat (getenv "HOME") "/.bash_profile"))
(setenv "NNTPSERVER" "news.eternal-september.org")
(setenv "SHELL" "bash")

(set-register ?\C-e "ಠ_ಠ")

;; Key bindings:

(global-set-key "\C-x\C-j" 'dired-jump)
(global-set-key "\C-x\C-b" 'ibuffer)
(global-set-key "\C-x\C-o" 'other-window-delete-rest)
(global-set-key [(shift control n)] 'scroll-one-line-up)
(global-set-key [(shift control p)] 'scroll-one-line-down)
(global-set-key [(meta p)] 'shell)
(global-set-key [(super \\)] 'find-file-at-point)
(global-set-key "\C-x\M-k" 'kill-this-buffer-and-associated-file)
(global-set-key "\C-x\C-u" 'upcase-region-or-characters)
(global-set-key "\C-x\C-l" 'downcase-region-or-characters)
(global-set-key [(shift control t)] 'toggle-case)
(global-set-key [(shift meta b)] 'bury-buffer)
(global-set-key [(shift meta x)] 'clipboard-kill-region)
(global-set-key [(shift meta c)] 'clipboard-kill-ring-save)
(global-set-key [(shift meta v)] 'x-clipboard-yank)
(global-set-key [(super b)] 'browse-url-at-point)
(global-set-key "\C-x5-" 'delete-frame-and-buffer)
(global-set-key "\C-x5=" 'absorb-other-frame)
(global-set-key [(shift meta s)] 'shell)
(global-set-key [(shift super s)] 'swap-windows)
(global-set-key [(shift super r)] 'rotate-windows)
(global-set-key "\C-xr5b" 'bookmark-jump-other-frame)
; (global-set-key "\C-cc" 'comment-copy-of-lines)
(global-set-key [(shift meta o)] 'other-frame)
(global-set-key "\C-ci" 'insert-image-at-point)
(global-set-key [(control ?`)] (lambda () (interactive) (dired "~")))
(global-set-key "\C-cm" 'magit-status)
(global-set-key "\C-cc" 'compile)
(global-set-key "\C-cr" 'recompile)
(global-set-key "\C-cp" 'windmove-up)
(global-set-key "\C-cn" 'windmove-down)
(global-set-key [(control kp-end)] (lambda () (interactive) (kill-buffer)))

(global-set-key [(control ?*)] 'my-isearch-word-at-point)
(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)

(global-unset-key "\C-x\C-d")  ;; list-directory
(global-unset-key "\C-x\C-n")  ;; set-goal-column

(define-key isearch-mode-map [(shift meta w)] 'my-isearch-word)

;;
;; Hooks:
;;

(add-to-hooks 'autopair-mode
  'java-mode-hook
  'perl-mode-hook
  'c++-mode-hook
  'scala-mode-hook
  'js-mode-hook
  'js2-mode-hook
  )

(add-to-hooks 'enable-paredit-mode
  'emacs-lisp-mode-hook
  'scheme-mode-hook
  'lisp-mode-hook
  'clojure-mode-hook
  )

(add-to-hooks 'paredit-for-lisp-interaction-mode
   'lisp-interaction-mode-hook
   )

(add-to-hooks 'turn-on-auto-fill
   'message-mode-hook
   'text-mode-hook
   )

(add-to-hooks 'show-trailing-whitespace
  'c-mode-hook
  'c++-mode-hook
  'emacs-lisp-mode-hook
  'java-mode-hook
  'js-mode-hook
  'org-mode-hook
  'perl-mode-hook
  'octave-mode-hook
  'ruby-mode-hook
  'scala-mode-hook
  'js2-mode-hook
  'sml-mode-hook
  'html-mode-hook
  'clojure-mode-hook
  'haskell-mode-hook
  'python-mode-hook
  )

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'comint-exec-hook 'no-process-query-on-exit)

(add-to-hooks (lambda () (local-set-key "\C-m" 'newline-and-indent))
  'c-mode-hook
  'c++-mode-hook
  'emacs-lisp-mode-hook
  'perl-mode-hook
  'java-mode-hook
  'js-mode-hook
  'js2-mode-hook
  'ruby-mode-hook
  'scala-mode-hook
  'sml-mode-hook
  'html-mode-hook
  'scheme-mode-hook
  'lisp-mode-hook
  'clojure-mode-hook
  )

(add-to-hooks 'subword-mode
  'java-mode-hook)

;; (add-to-hooks 'show-paren-mode
;;   'lisp-mode-hook
;;   'emacs-lisp-mode-hook
;;   'clojure-mode-hook)

(add-hook 'haskell-mode-hook 'haskell-indentation-mode)
;; haskell-simple-indent-mode, haskell-indentation-mode, haskell-indent-mode

(add-hook 'org-mode-hook (lambda () (setq do-not-indent-after-open-line t)))

(eval-after-load 'clojure-mode
  '(define-key clojure-mode-map [(meta \[)] #'paredit-wrap-square))

(defun show-trailing-whitespace ()
  (setq show-trailing-whitespace t))

(defun paredit-for-lisp-interaction-mode ()
  (paredit-mode 1)
  (setq minor-mode-overriding-map-alist
        `((paredit-mode ,@(remove (cons ?\C-j 'paredit-newline)
                                  paredit-mode-map)))))

(remove-hook 'comint-output-filter-functions
             'comint-postoutput-scroll-to-bottom)

;;
;; Gnus configuration:
;;

;; (setq gnus-select-method '(nntp "news.eternal-september.org"))

(setq gnus-select-method
      '(nnimap "gator3189.hostgator.com"
               (nnimap-server-port 993)
               (nnimap-stream tls)))

;; (setq gnus-secondary-select-methods
;;       '((nnimap "gator3189.hostgator.com"
;;                 (nnimap-server-port 993)
;;                 (nnimap-stream tls))))

;; outgoing: same host, SNMP port 465

(setq gnus-summary-line-format "%U%R%z %(%&user-date;  %-15,15f %* %B%s%)\n"
      gnus-user-date-format-alist '((t . "%d.%m.%Y %H:%M"))
      gnus-treat-hide-citation t
      gnus-cited-lines-visible '(0 . 5)
      gnus-large-newsgroup 10000
      gnus-user-date-format-alist '((t . "%m-%d-%Y %H:%M"))
      mm-text-html-renderer 'w3m
      mm-discouraged-alternatives '("text/html")
      w3m-use-form nil
      gnus-group-line-format "%M%S%p%P%5y:%B%(%C%)%O\n"
      gnus-save-newsrc-file nil
      gnus-treat-date-local t
      gnus-treat-date-lapsed t
      gnus-article-date-lapsed-new-header t
      gnus-treat-display-smileys nil)

(when (display-graphic-p)
  (setq gnus-sum-thread-tree-false-root ""
        gnus-sum-thread-tree-indent " "
        gnus-sum-thread-tree-root ""
        gnus-sum-thread-tree-leaf-with-other "├► "
        gnus-sum-thread-tree-single-leaf "╰► "
        gnus-sum-thread-tree-vertical "│"))

(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

(eval-after-load "gnus-sum.el.gz"
  '(progn
     (define-key gnus-summary-mode-map "n" 'gnus-summary-next-article)
     (define-key gnus-summary-mode-map "p" 'gnus-summary-prev-article)
     (define-key gnus-summary-mode-map "N" 'gnus-summary-next-unread-article)
     (define-key gnus-summary-mode-map "P" 'gnus-summary-prev-unread-article)))

;; (add-to-list 'gnus-secondary-select-methods
;;       '(nnimap "gmail"
;;                 (nnimap-address "imap.gmail.com")
;;                 (nnimap-server-port 993)
;;                 (nnimap-stream ssl)))
(defadvice message-insert-citation-line (after remove-extra-newline activate)
  (delete-backward-char 1))


;; Misc:

(defalias 'perldoc 'cperl-perldoc "Convenient shorthand for cperl-perldoc.")
(defalias 'tb 'comint-truncate-buffer)
(defalias 'c\'mere 'send-last-shell-to-this-directory)
(defalias 'mb 'rename-buffer)
(defalias 'ru 'rename-uniquely)
(defalias 'ar 'align-regexp)
(defalias 'nm 'normal-mode)
(defalias 'rb 'revert-buffer)
(defalias 'c 'calendar)
(defalias 'sh 'shell)
(defalias 'aar 'auto-align-regexp)
(defalias 'eb 'eval-buffer)
(defalias 'wr 'write-region)
(defalias 'jc 'jabber-connect)
(defalias 'tail 'auto-revert-tail-mode)
(defalias 'pe 'proced)
(defalias 'll 'longlines-mode)
(defalias 'ppx 'pretty-print-xml-buffer)
(defalias 'rf 'rename-file-and-buffer)
(defalias 'tp 'show-twitpic)

(load "my-advice")
(ad-activate 'open-line)
(ad-activate 'recenter)
(ad-activate 'ucs-insert)
(ad-activate 'gnus)
(ad-activate 'bookmark-jump)
(ad-activate 'insert-register)

(setq *recenter-fraction* 0.333)

;; Automatically-added stuff:

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
(put 'narrow-to-page 'disabled nil)

(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))

;; (setq inferior-lisp-program "/usr/bin/sbcl")
;; (add-to-list 'load-path "~/slime/")
;; (require 'slime)
;; (slime-setup)
;; (add-hook 'lisp-mode-hook (lambda () (slime-mode t)))
;; (add-hook 'inferior-lisp-mode-hook (lambda () (inferior-slime-mode t)))
;; (setq lisp-indent-function 'common-lisp-indent-function)
;; (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
;; (setq common-lisp-hyperspec-root "~/HyperSpec/")
;; (setq slime-startup-animation t)

;; Local customizations:

(load "laptop" t)
(load "akamai" t)
