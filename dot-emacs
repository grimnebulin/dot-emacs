;; -*- mode: emacs-lisp; lexical-binding: t; -*-

(eval-when-compile (require 'cl))

(cond
 ((display-graphic-p)
  (global-unset-key "\C-z")
  (global-unset-key "\C-x\C-z"))
 (t
  (menu-bar-mode -1)))

(add-to-list 'load-path "~/emacs/")

(load "functions")

(add-to-list 'initial-frame-alist '(top . 0))
(add-to-list 'initial-frame-alist '(right . 0))

(tool-bar-mode -1)
(random t)
(savehist-mode)
(quietly-read-abbrev-file)
(electric-pair-mode)
(show-paren-mode)
(horizontal-scroll-bar-mode -1)
(set-scroll-bar-mode 'right)
;; http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html
(global-prettify-symbols-mode)
(setq prettify-symbols-unprettify-at-point 'right-edge)
(winner-mode)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)

;; https://glyph.twistedmatrix.com/2015/11/editor-malware.html
(with-temp-buffer
  (require 'subr-x)
  (if (zerop (call-process "python3" nil t nil "-m" "certifi"))
      (let ((trustfile (string-trim (buffer-string))))
        (setq tls-program (list (format "gnutls-cli --x509cafile %s -p %%p %%h" (shell-quote-argument trustfile)))
              tls-checktrust t
              gnutls-verify-error t
              gnutls-trustfiles (list trustfile)))
    (message "Certificate failed!")))

(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))
(package-initialize)

(fset 'perl-mode 'cperl-mode)

(setq desktop-load-locked-desktop t)
(desktop-save-mode)

;;
;; Various extra packages:
;;

(require 'use-package)

(setq use-package-always-ensure t)

(use-package dash)

(use-package ibuffer
  :bind ("C-x C-b" . ibuffer))

(use-package paredit
  ;; https://www.reddit.com/r/emacs/comments/101uwgd/enable_paredit_mode_for_evalexpression_mini/
  :hook
  (minibuffer-setup . (lambda () (when (memq this-command '(eval-expression ibuffer-do-eval)) (enable-paredit-mode) (unbind-key (kbd "RET") paredit-mode-map))))
  (minibuffer-exit . (lambda () (bind-key (kbd "RET") #'paredit-newline paredit-mode-map)))
  :bind (:map paredit-mode-map ("C-M-u" . #'push-mark-paredit-backward-up)))

(use-package ack)

(use-package undo-tree
  :config
  (global-undo-tree-mode)
  (setq undo-tree-mode-lighter ""))

(use-package multiple-cursors
  :bind ("C-S-c C-S-c" . mc/edit-lines)
        ("C-S-c C-S-v" . mc/mark-next-like-this)
        ("C-S-c C-S-m" . mc/mark-pop))

(use-package org-bullets
  :hook (org-mode . org-bullets-mode))

;;
;; hippie-expand configuration
;;

(global-set-key "\M-/" 'hippie-expand)

(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;;
;; ido configuration
;;

(use-package ido
  :config
  (ido-mode 1)
  (ido-everywhere)
  (advice-add 'ido-read-buffer :around #'maybe-ignore-ido)
  (setq ido-enable-flex-matching t
        ido-use-virtual-buffers t
        ido-create-new-buffer 'always
        ido-max-directory-size 60000
        ido-auto-merge-work-directories-length -1))

(use-package ido-vertical-mode
  :config (ido-vertical-mode))

(put 'shell                   'ido 'ignore)
(put 'dired-create-directory  'ido 'ignore)
(put 'icalendar-import-buffer 'ido 'ignore)
(put 'gnus-article-save-part  'ido 'ignore)  ;; does this actually work?

;;
;;  Variables:
;;

(setq user-full-name    "Sean McAfee"
      user-mail-address "eefacm@gmail.com")

(setq-default indent-tabs-mode nil)
(setq backup-directory-alist '(("" . "~/.emacs_backups")))
(setq eval-expression-print-length nil)
(setq eval-expression-print-level nil)
(setq python-indent 4)
(setq-default javascript-indent-level 4)
(setq css-indent-offset 4)
(setq-default c-basic-offset 4)
(setq perl-indent-level 4)
(setq cperl-indent-level 4)
(setq cperl-close-paren-offset -4)
(setq cperl-indent-parens-as-block t)
(setq dired-deletion-confirmer 'y-or-n-p)
(setq dired-dwim-target t)
(setq bookmark-save-flag 1)
(setq line-move-visual nil)
(setq vc-follow-symlinks t)
(setq term-term-name "vt100")
(setq line-number-display-limit-width 9999)
(setq confirm-nonexistent-file-or-buffer nil)
(setq twittering-use-master-password t)
(setq tramp-auto-save-directory "/tmp")
(setq dired-auto-revert-buffer t)
(setq cperl-invalid-face 'off)
(setq use-dialog-box nil)
(setq history-length 1000)
(setq initial-scratch-message nil)
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
(setq shr-color-visible-luminance-min 70)
(setq auto-revert-interval 1)
(setq compilation-scroll-output t)
(setq comint-scroll-show-maximum-output nil)
(setq async-shell-command-buffer 'new-buffer)
(setq scroll-preserve-screen-position 'always)
(setq extended-command-suggest-shorter nil)
(setq shell-input-autoexpand nil)
(setq org-agenda-sticky t)
(setq org-startup-folded nil)
(setq org-yank-folded-subtrees nil)
(setq org-adapt-indentation nil)
(setq org-export-with-section-numbers nil)
(setq org-export-with-sub-superscripts '{})
(setq blink-cursor-blinks 0)
(setq recenter-positions '(0.333 top bottom))
(setq undo-tree-auto-save-history nil)

(with-eval-after-load 'autorevert
  (auto-revert-set-timer))

;; Holy crap!
(advice-add 'org-open-line :around
            (lambda (old &rest args)
              (cl-letf* ((n 0)
                         (old-open-line (symbol-function 'open-line))
                         ((symbol-function 'open-line)
                          (lambda (&rest args)
                            (if (= 1 (cl-incf n))
                                (vim-style-open-line current-prefix-arg)
                              (apply old-open-line args)))))
                (apply old args))))

;; No completion in code comment blocks:
(with-eval-after-load "company"
  (setq company-backends (delq 'company-dabbrev company-backends)))

(setq enable-recursive-minibuffers t)
(minibuffer-depth-indicate-mode)

(setq electric-pair-inhibit-predicate
      (lambda (c) (or (looking-back ":-?(" (- (point) 3))
                 (string-match-p (rx bos " *Minibuf-" (+ digit)) (buffer-name))
                 (electric-pair-default-inhibit c))))

(setq browse-url-generic-program "firefox")

(setq browse-url-browser-function
      (lambda (&rest args)
        (apply (cond ((eq (not (eq major-mode 'lisp-mode))
                          (not current-prefix-arg))
                      #'browse-url-generic)
                     ((fboundp 'eww-browse-url)
                      #'eww-browse-url)
                     (t
                      #'w3m-browse-url))
               args)))

(load (setq custom-file "~/.emacs-custom.el"))

;; Key bindings:

(global-set-key "\C-x\C-j" 'my-dired-jump)
(global-set-key "\C-x\C-o" 'other-window-delete-rest)
(global-set-key [(shift control n)] 'scroll-one-line-up)
(global-set-key [(shift control p)] 'scroll-one-line-down)
(global-set-key "\C-x\M-k" 'kill-this-buffer-and-associated-file)
(global-set-key "\C-x\C-u" 'upcase-region-or-characters)
(global-set-key "\C-x\C-l" 'downcase-region-or-characters)
(global-set-key [(shift control t)] 'toggle-case)
(global-set-key [(shift meta b)] 'bury-buffer)
(global-set-key "\C-x5-" 'delete-frame-and-buffer)
(global-set-key "\C-x5=" 'absorb-other-frame)
; (global-set-key "\C-cc" 'comment-copy-of-lines)
(global-set-key "\C-cm" 'magit-status)
(global-set-key "\C-cc" 'compile)
(global-set-key [(control kp-end)] #'kill-this-buffer)
(global-set-key (kbd "<C-M-backspace>") 'backward-kill-sexp)
(global-set-key (kbd "C-.") 'other-window-dwim)
(global-set-key (kbd "C-x b") #'multi-switch-buffers)
(global-set-key (kbd "C-M-=") #'count-region-bytes)
(global-set-key (kbd "<kp-home>") #'beginning-of-buffer)
(global-set-key (kbd "<kp-end>") #'end-of-buffer)
(global-set-key (kbd "C-M-y") #'yank-url-sans-query)
(global-set-key (kbd "C-M-u") #'push-mark-backward-up-list)
(global-set-key [remap open-line] #'vim-style-open-line)
(global-set-key (kbd "C-x r C-M-w") #'copy-rectangle-as-single-line)
(global-set-key [remap just-one-space] #'cycle-spacing)

(global-set-key "\C-s" 'isearch-or-swiper)

(global-set-key [(control ?*)] 'my-isearch-word-at-point)
(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)

(define-key 'help-command "\C-l" 'find-library)
(define-key 'help-command "\C-f" 'find-function)
(define-key 'help-command "\C-k" 'find-function-on-key)
(define-key 'help-command "\C-v" 'find-variable)

(global-unset-key "\C-x\C-d")  ;; list-directory
(global-unset-key "\C-x\C-n")  ;; set-goal-column

(define-key isearch-mode-map [(shift meta w)] 'my-isearch-word)
(define-key isearch-mode-map (kbd "<backspace>") #'isearch-delete-something)
(define-key isearch-mode-map (kbd "C-M-w") #'isearch-yank-symbol)

(require 'misc)
(global-set-key "\M-z" 'zap-up-to-char)

;;
;; Hooks:
;;

(add-to-hooks 'enable-paredit-mode
  'emacs-lisp-mode-hook
  'scheme-mode-hook
  'lisp-mode-hook
  'clojure-mode-hook
  'eval-expression-minibuffer-setup-hook)

(add-to-hooks 'paredit-for-lisp-interaction-mode
   'lisp-interaction-mode-hook)

(add-to-hooks 'turn-off-auto-fill
   'html-mode-hook)

(defun show-trailing-whitespace ()
  (setq show-trailing-whitespace t))

(add-to-hooks 'show-trailing-whitespace
  'prog-mode-hook
  'org-mode-hook
  'html-mode-hook)

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'comint-exec-hook 'no-process-query-on-exit)
(add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

(add-hook 'find-file-hook 'auto-insert)

(require 'autoinsert)
(setq auto-insert-query nil)

(setq auto-insert-alist
      (-remove (lambda (x) (pcase x (`((,_ . "Emacs Lisp header") . ,_) t))) auto-insert-alist))

(add-to-list
 'auto-insert-alist
 `((,(rx ".pl" eos) . "Perl program")
   nil
   "#!"
   (or (executable-find "perl") (error "No Perl executable found"))
   "\nuse strict;\n"))

(add-to-list
 'auto-insert-alist
 `((,(rx ".pm" eos) . "Perl module")
   nil
   "package "
   (let* ((case-fold-search nil)
          (comps (loop for p in (reverse (split-string (buffer-file-name) "/" t))
                       while (string-match (rx bos upper) p)
                       collect p)))
     (substring (string-join (reverse comps) "::") 0 -3))
   ";\n\n"
   _
   "\nuse strict;\n\n\n1;\n"))

(add-to-list
 'auto-insert-alist
 `((,(rx ".p6" eos) . "Perl 6 program")
   nil
   "#!"
   (or (executable-find "perl6") (error "No Perl 6 interpreter found"))
   "\n"))

(add-to-hooks (lambda () (local-set-key "\C-m" 'newline-and-indent))
  'prog-mode-hook
  'html-mode-hook)

(add-to-hooks 'subword-mode
  'java-mode-hook
  'scala-mode-hook
  'ruby-mode-hook
  'protobuf-mode-hook)

(with-eval-after-load 'clojure-mode
  (define-key clojure-mode-map [(meta \[)] #'paredit-wrap-square)
  (define-key clojure-mode-map [(super \{)] #'paredit-wrap-curly))

(defun paredit-for-lisp-interaction-mode ()
  (paredit-mode 1)
  (setq minor-mode-overriding-map-alist
        `((paredit-mode ,@(remove (cons ?\C-j 'paredit-newline)
                                  paredit-mode-map)))))

;;
;; Gnus configuration:
;;

(setq gnus-summary-line-format "%U%R%z %(%&user-date;  %-15,15f %* %B%s%)\n"
      gnus-user-date-format-alist '((t . "%d.%m.%Y %H:%M"))
      gnus-treat-hide-citation t
      gnus-cited-lines-visible '(0 . 5)
      gnus-large-newsgroup 10000
      gnus-user-date-format-alist '((t . "%m-%d-%Y %H:%M"))
      mm-text-html-renderer 'shr
      mm-discouraged-alternatives nil
      w3m-use-form nil
      gnus-group-line-format "%M%S%p%P%5y:%B%(%C%)%O\n"
      gnus-save-newsrc-file nil
      gnus-treat-date-local t
      gnus-treat-date-lapsed t
      gnus-article-date-lapsed-new-header t
      gnus-treat-display-smileys nil)

(when (display-graphic-p)
  (setq gnus-sum-thread-tree-false-root ""
        gnus-sum-thread-tree-indent " "
        gnus-sum-thread-tree-root ""
        gnus-sum-thread-tree-leaf-with-other "├► "
        gnus-sum-thread-tree-single-leaf "╰► "
        gnus-sum-thread-tree-vertical "│"))

(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
(add-hook 'dired-mode-hook 'dired-hide-details-mode)
(setq dired-hide-details-hide-symlink-targets nil)

(with-eval-after-load "gnus-sum.el.gz"
  (define-key gnus-summary-mode-map "n" 'gnus-summary-next-article)
  (define-key gnus-summary-mode-map "p" 'gnus-summary-prev-article)
  (define-key gnus-summary-mode-map "N" 'gnus-summary-next-unread-article)
  (define-key gnus-summary-mode-map "P" 'gnus-summary-prev-unread-article))

(use-package gnus
  :config
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "gmail"
                        (nnimap-address "imap.gmail.com")
                        (nnimap-server-port 993)
                        (nnimap-stream ssl))))

;; Misc:

(defalias 'perldoc 'cperl-perldoc "Convenient shorthand for cperl-perldoc.")
(defalias 'pd 'cperl-perldoc)
(defalias 'pm 'perlmod)
(defalias 'tb 'comint-truncate-buffer)
(defalias 'mb 'rename-buffer)
(defalias 'ru 'rename-uniquely)
(defalias 'ar 'align-regexp)
(defalias 'nm 'normal-mode)
(defalias 'rb 'revert-buffer)
(defalias 'c 'calc)
(defalias 'sh 'shell)
(defalias 'aar 'auto-align-regexp)
(defalias 'eb 'eval-buffer)
(defalias 'wr 'write-region)
(defalias 'tail 'auto-revert-tail-mode)
(defalias 'pe 'proced)
(defalias 'ppx 'pretty-print-xml-buffer)
(defalias 'rf 'rename-file-and-buffer)
(defalias 'moab 'multi-occur-in-all-buffers)
(defalias 'lp 'list-packages)
(defalias 'vl 'visual-line-mode)
(defalias 'mff 'magit-find-file)
(defalias 'xb 'erase-buffer)
(defalias 'cn 'column-number-mode)
(defalias 'jpp 'json-pretty-print-region-or-element-at-point)
(defalias 'mx 'pp-macroexpand-last-sexp)
(defalias 'cal 'calendar)
(defalias 'browse 'browse-url-at-point)
(defalias 'fl 'flush-lines)
(defalias 'kl 'keep-lines)

(setq js-indent-level 2)

(add-hook 'visual-line-mode-hook (lambda () (when visual-line-mode (turn-off-auto-fill))))

(with-eval-after-load 'python
  (setq python-prettify-symbols-alist
        (-remove (lambda (x) (member (car x) '("and" "or")))
                 python--prettify-symbols-alist)))

(with-eval-after-load 'json
  (advice-add 'json-encode-array :around #'encode-json-array-of-numbers-on-one-line))

(advice-add 'read-shell-command :filter-args #'notify-of-remote-shell-command)

(dolist (sym '(upcase-region downcase-region erase-buffer narrow-to-region dired-find-alternate-file narrow-to-page))
  (put sym 'disabled nil))

(add-to-list 'auto-mode-alist `(,(rx ".m" eos) . octave-mode))
(add-to-list 'auto-mode-alist `(,(rx ".scala" eos) . scala-mode))

(define-key isearch-mode-map [(control return)] #'isearch-exit-other-end)

(defun isearch-exit-other-end ()
  "Exit isearch, at the opposite end of the string."
  (interactive)
  (isearch-exit)
  (goto-char isearch-other-end))

(use-package diminish)

(diminish 'eldoc-mode)

(use-package expand-region
  :bind ("C-=" . er/expand-region))

(use-package flycheck
  :diminish flycheck-mode
  :config
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (setq flycheck-standard-error-navigation nil)
  (setq flycheck-emacs-lisp-load-path 'inherit)
  (global-flycheck-mode))

(setq-default dired-listing-switches "-alhv")

(setq uniquify-buffer-name-style 'post-forward)

(use-package ido-completing-read+)

(use-package magit
  :config
  (setq magit-display-buffer-function 'my-magit-display-buffer)
  (setq magit-last-seen-setup-instructions "1.4.0")
  (setq magit-completing-read-function #'magit-ido-completing-read))

(defun my-magit-display-buffer (buffer)
  (if (eq 'magit-status-mode (buffer-local-value 'major-mode buffer))
      (display-buffer buffer '(display-buffer-same-window))
    (magit-display-buffer-traditional buffer)))

(use-package elisp-slime-nav
  :diminish elisp-slime-nav-mode
  :config (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode))

(use-package projectile
  :diminish projectile-mode
  :config
  (projectile-mode)
  (define-key projectile-mode-map "\C-cp" 'projectile-command-map))

(use-package dtrt-indent
  :config (dtrt-indent-mode))

(use-package define-word
  :bind ("\C-cd" . define-word-at-point)
        ("\C-cD" . define-word))

(with-eval-after-load 'sgml-mode
  (use-package tagedit
    :config (tagedit-add-paredit-like-keybindings)))

(use-package iedit)

(use-package volatile-highlights
  :config (volatile-highlights-mode t)
  :diminish volatile-highlights-mode)

(use-package git-timemachine
  :defer t)

;; (use-package pdf-tools
;;   :mode ((rx ".pdf" eos) . pdf-view-mode))

(use-package helm
  :commands (helm-buffers-list))

(use-package helm-unicode
  :commands (helm-unicode-source))

(global-set-key (kbd "C-x 8 RET") #'helm-unicode-with-kill-option)

(use-package restclient
  :mode ((rx ".rest" eos) . restclient-mode))

(use-package beginend
  :diminish beginend-dired-mode
  :config (add-hook 'dired-mode-hook (lambda () (beginend-dired-mode 1))))

(use-package shell-pop
  :init (setq shell-pop-universal-key "C-`"))

(use-package fix-word
  :config
  (global-set-key "\M-u" #'fix-word-upcase)
  (global-set-key "\M-l" #'fix-word-downcase)
  (global-set-key "\M-c" #'fix-word-capitalize))

(use-package dired-filter)

(use-package js2-mode
  :mode (rx ".js" eos)
  :bind (:map js2-mode-map ("C-k" . #'js2r-kill) ("M-." . nil))
  :hook (js2-mode . js2-imenu-extras-mode))

(use-package js2-refactor
  :config (js2r-add-keybindings-with-prefix "C-c C-r")
  :hook (js2-mode . js2-refactor-mode))

(use-package xref-js2)

;; tern and company-tern for real projects

(when-let (extra (getenv "EMACS_EXTRA_INIT"))
  (loop for file in (split-string extra ":")
        if (file-exists-p file)
        do (with-demoted-errors "Error: %S" (load file))))

;; Local Variables:
;; byte-compile-warnings: (not free-vars unresolved)
;; End:
