;; -*- mode: emacs-lisp; -*-

(require 'cl)

(set-face-attribute 'default nil :font "Inconsolata" :height 140)
; (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 140)

(push "/usr/local/bin" exec-path)
(push (format "%s/bin" (getenv "HOME")) exec-path)

(add-to-list 'load-path "~/emacs")
(add-to-list 'load-path "~/emacs/emms-3.0")
(add-to-list 'load-path "~/emacs/dtrt-indent")
(add-to-list 'load-path "~/emacs/yasnippet")

(add-to-list 'load-path "~/emacs/magit-1.0.0")
(require 'magit)

(add-to-list 'load-path "~/emacs/org-mode/lisp")
(require 'org)
(require 'org-capture)

(setq initial-frame-alist (append '((top . 0) (left . -100)) initial-frame-alist))
(setq default-frame-alist (append '((width . 90) (height . 50)) default-frame-alist))

(load "functions")
(load "wrif" t)
(load "akamai" t)
(load "laptop" t)
(load "ace-jump-mode/ace-jump-mode.el")

(transient-mark-mode 1)
;; (iswitchb-mode 1)
(tool-bar-mode -1)
(random t)
; (server-start)
(desktop-save-mode 1)
(quietly-read-abbrev-file)

(windmove-default-keybindings)

(autoload 'ibuffer "ibuffer" "List buffers." t)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

(require 'dtrt-indent)
(dtrt-indent-mode 1)

;; (require 'yasnippet)
;; (yas/load-directory "~/emacs/snippets")

(require 'remember)
(global-set-key "\C-cr" 'remember)

;;
;; hippie-expand configuration
;;

(global-set-key "\M-/" 'hippie-expand)

(setq hippie-expand-try-functions-list '(
      try-expand-dabbrev
      try-expand-dabbrev-all-buffers
      try-expand-dabbrev-from-kill
      try-complete-file-name-partially
      try-complete-file-name
      try-expand-all-abbrevs
      try-expand-list
      try-expand-line
      try-complete-lisp-symbol-partially
      try-complete-lisp-symbol
))

;;
;; ido configuration
;;

(setq ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-decorations '(
          "\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]"
          " [Not readable]" " [Too big]" " [Confirm]"
      )
)

(ido-mode 1)
(ido-everywhere 1)

(defun ido-disable-line-trucation () (set (make-local-variable 'truncate-lines) nil))

(add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-trucation)

(defadvice ido-read-buffer (around ido-read-buffer-possibly-ignore activate)
  "Check to see if user wanted to avoid using ido"
  (if (loop for command = this-command then (symbol-function command)
            while (symbolp command)
            thereis (eq (get command 'ido) 'ignore))
      (let ((read-buffer-function nil))
        (run-hook-with-args 'ido-before-fallback-functions 'read-buffer)
        (setq ad-return-value (apply 'read-buffer (ad-get-args 0))))
    ad-do-it))

(put 'shell 'ido 'ignore)

;;
;;  Variables:
;;

(setq user-full-name    "Sean McAfee"
      user-mail-address "eefacm@gmail.com")

(setq iswitchb-prompt-newbuffer nil)
(setq-default indent-tabs-mode nil)
(setq backup-directory-alist '(("" . "~/.emacs_backups")))
(setq eval-expression-print-length nil)
(setq python-indent 4)
(setq-default javascript-indent-level 4)
(setq css-indent-offset 4)
(setq-default c-basic-offset 4)
(setq perl-indent-level 4)
(setq dired-deletion-confirmer 'y-or-n-p)
(setq dired-dwim-target t)
(setq bookmark-save-flag 1)
(setq line-move-visual nil)
(setq vc-follow-symlinks t)
(setq term-term-name "vt100")
(setq line-number-display-limit-width 9999)
(setq longlines-show-hard-newlines t)

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "conkeror")

(load (setq custom-file "~/.emacs-custom.el"))

(setenv "BASH_ENV" (concat (getenv "HOME") "/.bash_profile"))
(setenv "NNTPSERVER" "news.eternal-september.org")
(setenv "SHELL" "bash")


;; Key bindings:

(global-set-key "\C-x\C-j" 'dired-jump)
(global-set-key "\C-m" 'newline-and-indent)
(global-set-key "\C-x\C-j" 'dired-jump)
(global-set-key "\C-x\C-b" 'ibuffer)
(global-set-key "\C-x\C-o" 'other-window-delete-rest)
(global-set-key [(shift control n)] 'scroll-one-line-up)
(global-set-key [(shift control p)] 'scroll-one-line-down)
(global-set-key [(meta  p)] 'shell)
(global-set-key [(super \\)] 'find-file-at-point)
(global-set-key [(super ?!)] 'shell-command-with-?-expansion)
(global-set-key "\C-x\M-k" 'kill-this-buffer-and-associated-file)
(global-set-key "\C-x\C-u" 'upcase-region-or-characters)
(global-set-key "\C-x\C-l" 'downcase-region-or-characters)
(global-set-key [(shift control t)] 'toggle-case)
(global-set-key [(control ?*)] 'my-isearch-word-at-point)
(global-set-key [(shift meta b)] 'bury-buffer)
(global-set-key [(shift meta x)] 'clipboard-kill-region)
(global-set-key [(shift meta c)] 'clipboard-kill-ring-save)
(global-set-key [(shift meta v)] 'x-clipboard-yank)
(global-set-key [(super b)] 'browse-url-at-point)
(global-set-key "\C-x5-" 'delete-frame-and-buffer)
(global-set-key [(control super k)] 'kill-this-buffer)
(global-set-key [(super j)] 'ace-jump-mode)
(global-set-key [(shift meta s)] 'shell)
(global-set-key [(shift super s)] 'swap-windows)
(global-set-key [(shift super r)] 'rotate-windows)
(global-set-key [(super g)] 'magit-status)

(global-unset-key "\C-x\C-d")  ;; list-directory
(global-unset-key "\C-x\C-n")  ;; set-goal-column

(when window-system
  (global-unset-key "\C-z")
  (global-unset-key "\C-x\C-z"))


;; Hooks:

(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'text-mode-hook 'auto-fill-mode)
(add-hook 'text-mode-hook (lambda () (local-set-key [(control m)] 'newline)))
(add-hook 'html-mode-hook 'turn-off-auto-fill)
(add-hook 'sgml-mode-hook 'turn-off-auto-fill)
(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)
(add-hook 'message-mode-hook 'auto-fill-mode)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'comint-exec-hook 'no-process-query-on-exit)
(add-hook 'emacs-lisp-mode-hook 'show-trailing-whitespace)
(add-hook 'org-mode-hook 'show-trailing-whitespace)

(defun show-trailing-whitespace ()
  (setq show-trailing-whitespace t))

;; (add-hook 'find-file-hook 'its-all-text-longlines)

;; (defun its-all-text-longlines ()
;;   (when (string-match "/itsalltext/" (buffer-file-name))
;;     (auto-fill-mode -1)
;;     (longlines-mode 1)))

(remove-hook 'comint-output-filter-functions
             'comint-postoutput-scroll-to-bottom)

;; EMMS:

(require 'emms-setup)
(require 'emms-player-mpg321-remote)
(require 'emms-playing-time)
(emms-standard)
(emms-default-players)
(push 'emms-player-mpg321-remote emms-player-list)
(emms-playing-time 1)

;; Gnus:

(setq gnus-summary-line-format "%U%R%z %(%&user-date;  %-15,15f %* %B%s%)\n"
      gnus-user-date-format-alist '((t . "%d.%m.%Y %H:%M"))
      gnus-sum-thread-tree-false-root ""
      gnus-sum-thread-tree-indent " "
      gnus-sum-thread-tree-root ""
      gnus-sum-thread-tree-leaf-with-other "├► "
      gnus-sum-thread-tree-single-leaf "╰► "
      gnus-sum-thread-tree-vertical "│"
      gnus-treat-hide-citation t
      gnus-cited-lines-visible '(0 . 5)
      gnus-large-newsgroup 10000
      gnus-user-date-format-alist '((t . "%m-%d-%Y %H:%M"))
      mm-text-html-renderer 'w3m
      gnus-group-line-format "%M%S%p%P%5y:%B%(%C%)%O\n"
      gnus-save-newsrc-file nil)

;; (add-to-list 'gnus-secondary-select-methods
;;       '(nnimap "gmail"
;;                 (nnimap-address "imap.gmail.com")
;;                 (nnimap-server-port 993)
;;                 (nnimap-stream ssl)))

;; Misc:

(eval-after-load 'term
  '(term-set-escape-char ?\C-x))

(defalias 'perldoc 'cperl-perldoc "Convenient shorthand for cperl-perldoc.")
; (defalias 'gof 'gnus-other-frame)
(defalias 'tb 'comint-truncate-buffer)
(defalias 'c\'mere 'send-last-shell-to-this-directory)
(defalias 'mb 'rename-buffer)
(defalias 'ru 'rename-uniquely)
(defalias 'ar 'align-regexp)
(defalias 'nm 'normal-mode)
(defalias 'rb 'revert-buffer)
(defalias 'ru 'rename-uniquely)
(defalias 'c 'calendar)
(defalias 'sh 'shell)
(defalias 'aar 'auto-align-regexp)
(defalias 'eb 'eval-buffer)

(add-to-list 'load-path "~/emacs/color-theme-6.6.0")
(require 'color-theme)
(require 'zenburn)
(zenburn)

(defadvice open-line (around vi-style-open-line activate)
  "Make open-line behave more like vi."
  (beginning-of-line)
  ad-do-it
  (indent-according-to-mode))

(defvar recenter-fraction 0.33
  "*The recenter-proportionally advice will recenter the screen by
putting the current line this far down the window.")

(defadvice recenter (before recenter-proportionally activate)
  (or (ad-get-arg 0)
      (ad-set-arg 0 (truncate (* recenter-fraction (window-body-height))))))

(defadvice ucs-insert (before use-ido-completing-read activate)
  (interactive (list (ido-read-char-by-name "Unicode (name or hex): "))))

;; Automatically-added stuff:

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'erase-buffer 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
(put 'narrow-to-page 'disabled nil)
